<?php

/**
 * Implements hook_menu()
 **/
function proud_core_menu() {
  $items['proud-front'] = array(
    'title' => 'Welcome',
    'page callback' => 'proud_core_front',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );

  $items['user/me'] = array(
    'title' => 'Welcome',
    'page callback' => 'proud_core_me',
    'access callback' => 'user_is_logged_in',
    'type' => MENU_CALLBACK,
  );

  $items['user/me/edit'] = array(
    'title' => 'Welcome',
    'page callback' => 'proud_core_me_edit',
    'access callback' => 'user_is_logged_in',
    'type' => MENU_CALLBACK,
  );
  return $items;
}

/**
 * Implements hook_menu_alter()
 * Make the Node clone link a normal tab.
 **/
function proud_core_menu_alter(&$items) {
  if (!empty($items['node/%node/clone'])) {
    $items['node/%node/clone']['type'] = MENU_LOCAL_TASK;
  }
  if (!empty($items['node/%node/clone/%clone_token'])) {
    $items['node/%node/clone/%clone_token']['type'] = MENU_LOCAL_TASK;
  }

  // Overwrite default apps page
  $items['admin/apps']['page callback'] = 'proud_core_apps_marketplace_callback';

  // @todo: make this work
  // Hide the Manage Fields tab
  if (module_exists('panelizer') && !module_exists('ds')) {
    $items['admin/structure/types/manage/%node_type/display']['type'] = MENU_CALLBACK;
  }

  // Add a helper panels menu item
  $items['admin/structure/types/manage/%node_type/panels'] = array(
    'title' => t('Manage Panel Content'),
    'page callback' => 'proud_core_content_panels_callback',
    'type' => MENU_NORMAL_ITEM,
    'page_arguments' => 4,
    //@todo: 'access_callback' =>
  );

  //dpm($items);
}


/**
 * Page callback replacement for admin/apps.
 **/
function proud_core_apps_marketplace_callback() {
  drupal_goto('admin/apps/proud');
}

/**
 * Page callback redirect node panels menu item.
 **/
function proud_core_content_panels_callback($type) {
  drupal_goto('admin/config/content/panelizer/node/'. $type .'.page_manager/content');
}

/**
 * Implements hook_apps_app_modules_enabled.
 */
/*function proud_core_apps_app_modules_enabled($app) {
  //if (!empty($app['something'])) {
  //  mymodule_something($app);
  //}
  dpm($app);
}*/


/**
 * Install related display module when base module is enabled.
 */
function proud_core_enable_display($module_name) {
  if (module_exists('panelizer')) {
    module_enable(array($module_name . '_display'));
  }
}

/**
 * Blank callback wrapper for the homepage.
 **/
function proud_core_front() {
  return ' ';
}

/**
 * Callback for the me page for logged in users.
 **/
function proud_core_me() {
  global $user;
  drupal_goto('user/' . $user->uid);
}

/**
 * Callback for the me page for logged in users.
 **/
function proud_core_me_edit() {
  global $user;
  drupal_goto('user/' . $user->uid . '/edit');
}

/**
 * Implements hook_user_presave()
 * Sets the user's admin_select value to navbar if it isn't already set.
 **/
function proud_core_user_presave(&$edit, $account, $category) {
  if (module_exists('admin_select') && module_exists('navbar') && user_access('access navbar', $account) && empty($account->data['admin_select']) && empty($edit['data']['admin_select'])) {
    // @todo: get this value from var_get('admin_select_default')
    $edit['data']['admin_select'] = 'toolbar';
  }
}

/**
 * Implements hook_admin_paths_alter()
 **/
function proud_core_admin_paths_alter(&$paths) {
  $paths['import'] = TRUE;
  $paths['import/*'] = TRUE;
  $paths['media/*/format-form'] = TRUE;
  return $paths;
}


/**
 * Implements hook_file_view().
 * Provide a direct download to certain types of files (images, documents).
 * This is really necessary because ckeditor_link_file only links to the file.
 * @todo: move this to soar_media (need to have a config page first).
 */
function proud_core_file_view($file, $view_mode, $langcode) {
  if (arg(0) === 'file') {
    switch ($file->type) {
      case 'document':
      case 'image':
        $url = file_create_url($file->uri);
        drupal_goto($url);
        break;
    }
  }
}


/**
 * Function returns entity specific ID for any entity
 **/
function proud_core_get_entity_id($entity_type, $entity) {
  $ids = entity_extract_ids($entity_type, $entity);
  return array_shift($ids);
}

/**
 * Retrieve the $view->result for any view
 * @param  string $view_name The view name
 * @param  string $display   The view display
 * @param  array  $args      [description]
 * @param  array  $filters   [description]
 * @return array             An array of view results (class)
 */
function proud_core_view_data($view_name, $display = 'default', $args = array(), $filters = array(), $mode = 'results') {
  $view = is_object($view_name) ? $view_name : views_get_view($view_name);
  $view->set_display($display);

  if (count($filters) > 0) {
    $view->set_exposed_input($filters);
  }
  $view->args = $args;

  $view->execute();
  //dpm($view);
  return ($mode == 'view') ? $view : $view->result;
}

/**
 * Implements hook_features_banish_alter().
 */
function proud_core_features_banish_alter(&$banished) {
  // Disable strongarm!
  global $conf;
  $keys = array_keys($conf);
  $banished['variable'] = $keys;

  $banished['dependencies'] = array('devel', 'views_ui', 'strongarm', 'defaultconfig');
}


function proud_core_field_formatter_info_alter(&$info) {
  //dpm($info);
}


/**
 * Implements hook_form_alter().
 **/
function proud_core_form_alter(&$form, &$form_state, $form_id) {
  //dpm($form_id);
}


function proud_core_form_views_exposed_form_alter(&$form, &$form_state) {
  // Make selects radios/checkboxes
  $fields = array('category');
  foreach ($fields as $key) {
    if (!empty($form[$key])) {
      //$form[$key]['#type'] = isset($form[$key]['#multiple']) && $form[$key]['#multiple'] ? 'checkboxes' : 'radios';
      // @todo: make this work: http://www.hashbangcode.com/blog/change-views-exposed-filter-form-select-element-list-checkboxes
      //$form[$key]['#theme'] = array('select_as_checkboxes');
    }
  }

  // Tweak styling on date selects
  $fields = array('date');
  foreach ($fields as $key) {
    if (!empty($form[$key])) {
      $form[$key]['min']['#prefix'] = '<div class="row"><div class="col-sm-6">';
      $form[$key]['min']['#suffix'] = '</div>';
      $form[$key]['min']['#date_format'] = 'm/d/Y';
      $form[$key]['min']['#attributes']['class'] = array('datepicker form-control');
      $form[$key]['min']['#attributes']['placeholder'] = t('Start');
      unset($form[$key]['min']['#title']);
      $form[$key]['max']['#prefix'] = '<div class="col-sm-6">';
      $form[$key]['max']['#suffix'] = '</div></div>';
      $form[$key]['max']['#date_format'] = 'm/d/Y';
      $form[$key]['max']['#attributes']['class'] = array('datepicker form-control');
      $form[$key]['max']['#attributes']['placeholder'] = t('End');
      unset($form[$key]['max']['#title']);
    }
  }

  // Tweak styling on search text fields
  $fields = array('search');
  foreach ($fields as $key) {
    if (!empty($form[$key])) {
      $form[$key]['#attributes']['class'][] = 'search';
      $form[$key]['#attributes']['placeholder'] = t('Keywords');
    }
  }
   
  
  //dpm($form);
}


/**
 * hack to make exposed dropdowns appear as checkboxes
 * (can't do it w/ form_alter b/c whole structure is different)
 * just render the options directly as checkboxes, pass the values the same as the SELECT,
 * tricks the form api and views to think it's a dropdown
 * [registered w/ hook_theme, toggled w/ #theme in form_alter]
 */
/*function theme_select_as_checkboxes($element) {
  $output = '';
 
  $selected_options = (array) $element['#post'][$element['#name']];
  dpm($element);
 
  foreach($element['#options'] as $key => $value) {
    $id = $element['#id'] . '-' . $key;
 
    // is this option selected?
    $selected = (array_search($key, $selected_options) !== false);
 
    $checkbox = '<input type="checkbox" '
      . 'name="'. $element['#name'] . '[]' .'" '
      . 'id="'. $id .'" '
      . 'value="'. $key .'" '
      . ($selected ? ' checked="checked" ' : ' ')
      . drupal_attributes($element['#attributes']) .' />';
 
    $output .= '<label class="option" for="'. $id .'">' . $checkbox .' '. $value .'</label>' . "\n";
  }
  return theme_form_element($element, $output);
}*/

/**
 * Implementation of HOOK_theme.
 *
 * @return array An array of theme hooks.
 */
/*function proud_core_theme() {
  return array(
    'select_as_checkboxes' => array(
      'variables' => array(
        'element' => array(),
      ),
    ),
  );
}*/


/**
 * Preprocess the add content link used in the modal.
 */
function proud_core_preprocess_panels_add_content_link(&$vars) {
  //dpm(var_dump($vars,1));
}

//******************************************************************

// Panels workflow

//******************************************************************

// @todo: do we want this?  Jeff L Mar 2015
/**
 * Implements hook_panels_pane_content_alter().
 */
function proud_core_panels_pane_content_alter($content, $pane, $args, $context) {
  
  // only display the link to people with adequate permissions, obviously
  if ( user_access('change layouts in place editing') 
    && isset($content->module)
    && $content->module == 'panels_mini'
  ) {
    
    $delta = $content->delta;
    $mini_panel = panels_mini_load($delta);
    $url = 'admin/structure/mini-panels/list/'. $delta .'/edit/content';
    $title = $mini_panel->admin_title;
    
    $content_addition = '<p class="col-xs-12 edit-mini-panel-link">'
                      . l('Edit '. $title, $url, array('attributes' => array('class' => array('btn', 'btn-warning', 'btn-xs'))))
                      . '</p>';

    // Prepend edit link to content
    $content->content =  $content_addition . $content->content;
  }


  //dpm($content);
}

