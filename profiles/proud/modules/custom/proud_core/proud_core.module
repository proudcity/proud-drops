<?php

/**
 * Implements hook_menu()
 **/
function proud_core_menu() {
  $items['proud-front'] = array(
    'title' => 'Welcome',
    'page callback' => 'proud_core_front',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );

  $items['user/me'] = array(
    'title' => 'Welcome',
    'page callback' => 'proud_core_me',
    'access callback' => 'user_is_logged_in',
    'type' => MENU_CALLBACK,
  );

  $items['user/me/edit'] = array(
    'title' => 'Welcome',
    'page callback' => 'proud_core_me_edit',
    'access callback' => 'user_is_logged_in',
    'type' => MENU_CALLBACK,
  );
  return $items;
}

/**
 * Implements hook_menu_alter()
 * Make the Node clone link a normal tab.
 **/
function proud_core_menu_alter(&$items) {
  if (!empty($items['node/%node/clone'])) {
    $items['node/%node/clone']['type'] = MENU_LOCAL_TASK;
  }
  if (!empty($items['node/%node/clone/%clone_token'])) {
    $items['node/%node/clone/%clone_token']['type'] = MENU_LOCAL_TASK;
  }

  // Overwrite default apps page
  $items['admin/apps']['page callback'] = 'proud_core_apps_marketplace_callback';

  // @todo: make this work
  // Hide the Manage Fields tab
  if (module_exists('panelizer') && !module_exists('ds')) {
    $items['admin/structure/types/manage/%node_type/display']['type'] = MENU_CALLBACK;
  }

  // Add a helper panels menu item
  $items['admin/structure/types/manage/%node_type/panels'] = array(
    'title' => t('Manage Panel Content'),
    'page callback' => 'proud_core_content_panels_callback',
    'type' => MENU_NORMAL_ITEM,
    'page_arguments' => 4,
    //@todo: 'access_callback' =>
  );

  //dpm($items);
}


/**
 * Page callback replacement for admin/apps.
 **/
function proud_core_apps_marketplace_callback() {
  drupal_goto('admin/apps/proud');
}

/**
 * Page callback redirect node panels menu item.
 **/
function proud_core_content_panels_callback($type) {
  drupal_goto('admin/config/content/panelizer/node/'. $type .'.page_manager/content');
}

/**
 * Implements hook_apps_app_modules_enabled.
 */
/*function proud_core_apps_app_modules_enabled($app) {
  //if (!empty($app['something'])) {
  //  mymodule_something($app);
  //}
  dpm($app);
}*/


/**
 * Install related display module when base module is enabled.
 */
function proud_core_enable_display($module_name) {
  if (module_exists('panelizer')) {
    module_enable(array($module_name . '_display'));
  }
}

/**
 * Blank callback wrapper for the homepage.
 **/
function proud_core_front() {
  return ' ';
}

/**
 * Callback for the me page for logged in users.
 **/
function proud_core_me() {
  global $user;
  drupal_goto('user/' . $user->uid);
}

/**
 * Callback for the me page for logged in users.
 **/
function proud_core_me_edit() {
  global $user;
  drupal_goto('user/' . $user->uid . '/edit');
}

/**
 * Implements hook_user_presave()
 * Sets the user's admin_select value to navbar if it isn't already set.
 **/
function proud_core_user_presave(&$edit, $account, $category) {
  if (module_exists('admin_select') && module_exists('navbar') && user_access('access navbar', $account) && empty($account->data['admin_select']) && empty($edit['data']['admin_select'])) {
    // @todo: get this value from var_get('admin_select_default')
    $edit['data']['admin_select'] = 'toolbar';
  }
}

/**
 * Implements hook_admin_paths_alter()
 **/
function proud_core_admin_paths_alter(&$paths) {
  $paths['import'] = TRUE;
  $paths['import/*'] = TRUE;
  $paths['media/*/format-form'] = TRUE;
  return $paths;
}


/**
 * Implements hook_file_view().
 * Provide a direct download to certain types of files (images, documents).
 * This is really necessary because ckeditor_link_file only links to the file.
 * @todo: move this to soar_media (need to have a config page first).
 */
function proud_core_file_view($file, $view_mode, $langcode) {
  if (arg(0) === 'file') {
    switch ($file->type) {
      case 'document':
      case 'image':
        $url = file_create_url($file->uri);
        drupal_goto($url);
        break;
    }
  }
}


/**
 * Function returns entity specific ID for any entity
 **/
function proud_core_get_entity_id($entity_type, $entity) {
  $ids = entity_extract_ids($entity_type, $entity);
  return array_shift($ids);
}

/**
 * Retrieve the $view->result for any view
 * @param  string $view_name The view name
 * @param  string $display   The view display
 * @param  array  $args      [description]
 * @param  array  $filters   [description]
 * @return array             An array of view results (class)
 */
function proud_core_view_data($view_name, $display = 'default', $args = array(), $filters = array(), $mode = 'results') {
  $view = is_object($view_name) ? $view_name : views_get_view($view_name);
  $view->set_display($display);

  if (count($filters) > 0) {
    $view->set_exposed_input($filters);
  }
  $view->args = $args;

  $view->execute();
  //dpm($view);
  return ($mode == 'view') ? $view : $view->result;
}



//******************************************************************

// Panels workflow

//******************************************************************

// @todo: do we want this?  Jeff L Mar 2015
/**
 * Implements hook_panels_pane_content_alter().
 */
function proud_core_panels_pane_content_alter($content, $pane, $args, $context) {
  
  // only display the link to people with adequate permissions, obviously
  if ( user_access('change layouts in place editing') 
    && isset($content->module)
    && $content->module == 'panels_mini'
  ) {
    
    $delta = $content->delta;
    $mini_panel = panels_mini_load($delta);
    $url = 'admin/structure/mini-panels/list/'. $delta .'/edit/content';
    $title = $mini_panel->admin_title;
    
    $content_addition = '<p class="col-xs-12 edit-mini-panel-link">'
                      . l('Edit '. $title, $url, array('attributes' => array('class' => array('btn', 'btn-warning', 'btn-xs'))))
                      . '</p>';

    // Prepend edit link to content
    $content->content =  $content_addition . $content->content;
  }
}

