<?php


/**
 * implemenation of hook_field_info()
 * @return array
 */
function fontawesome_field_field_info() {
  return array(
    'fontawesome_field' => array(
      'label' => t('Font Awesome Icon'),
      'description' => t('Field type to create a Font Awesome icon'),
      'default_widget' => 'fontawesome_field_widget',
      'default_formatter' => 'fontawesome_field_formatter',
      'instance_settings' => array(),
      'property_type' => 'fontawesome_field',
      'property_callbacks' => array('fontawesome_field_property_info_callback'),
    ),
  );
}


function fontawesome_field_property_info_callback(&$info, $entity_type, $field, $instance, $field_type) {
  $name = $field['field_name'];
  $property = &$info[$entity_type]['bundles'][$instance['bundle']]['properties'][$name];

  $property['getter callback'] = 'entity_metadata_field_verbatim_get';
  $property['setter callback'] = 'entity_metadata_field_verbatim_set';
  unset($property['query callback']);

  // :TODO: set hook_property_info
}

/**
 * implemenation of hook_widget_info()
 * @return array
 */
function fontawesome_field_field_widget_info() {
  $widgets = array();

  $widgets['fontawesome_field_widget'] = array(
    'label' => t('Default'),
    'field types' => array('fontawesome_field'),
  );

  $widgets['fontawesome_field_widget_color'] = array(
    'label' => t('Icon and Color'),
    'field types' => array('fontawesome_field'),
  );

  return $widgets;
}



/**
 * Implements hook_field_settings_form().
 *
 * Handle the parameters for a field.
 */
function fontawesome_field_field_settings_form($field, $instance, $has_data) {
  $settings = $field['settings'];
  $form = array();
  switch ($instance['widget']['type']) {
    
    case 'fontawesome_field_widget_color':
      $form['default_colors'] = array(
        '#type' => 'textarea',
        '#title' => t('Default colors'),
        '#default_value' => isset($settings['default_colors']) ? $settings['default_colors'] : $colors = variable_get('fontawesome_field_default_colors', FALSE) ? $colors : '
#AC725E,#D06B64,#F83A22,#FA573C,#FF7537,#FFAD46
#42D692,#16A765,#7BD148,#B3DC6C,#FBE983
#92E1C0,#9FE1E7,#9FC6E7,#4986E7,#9A9CFF
#B99AFF,#C2C2C2,#CABDBF,#CCA6AC,#F691B2
#CD74E6,#A47AE2
        ',
        '#required' => TRUE,
        '#description' => t('Default colors for pre-selected color boxes'),
      );
      break;
  }
  return $form;
}



function fontawesome_field_field_widget_form(&$form, &$form_state, $field, $instance, $langcode, $items, $delta, $element) {
  switch ($instance['widget']['type']) {

    case 'fontawesome_field_widget':
      $process_hack = array('fontawesome_field_ignore_parent');

      $required = $element['#required'];
      $item =& $items[$delta];

      $field_id = 'fontawesome-field-' .rand(10000,99999);

      $element['wrapper'] = array(
        '#prefix' => '<div id="'. $field_id .'" class="font-awesome-field-admin-wrapper"><label>' . $instance['label'] . '</label>',
        '#suffix' => '</div>',
        '#process' => $process_hack,
      );

      $element['wrapper']['preview'] = array(
        '#prefix' => '<div class="container"><div class="fontawesome-icon-preview"><p>Preview</p>',
        '#suffix' => '</div></div>',
      );

      $containers = array(
        array('icon'), array('size'), array('invert','fixed_width','border','spinning'), array('rotation'), array('flip'),
      );

      $fa_fields['icon'] = array(
        '#title' => t('Icon'),
        '#type' => 'select',
        '#default_value' => isset($item['icon']) ? $item['icon'] : null,
        '#options' => fontawesome_field_get_option_list('icons'),
        '#required' => $required,
        '#attributes' => array('class' => array('fontawesome-icon','faf-watch')),
      );

      $fa_fields['size'] = array(
        '#title' => t('Size Adjustment'),
        '#type' => 'select',
        '#default_value' => isset($item['size']) ? $item['size'] : null,
        '#options' => fontawesome_field_get_option_list('modifiers','size'),
        '#attributes' => array('class' => array('fontawesome-size','faf-watch')),
      );

      $fa_fields['invert'] = array(
        '#title' => t('Inverse Color'),
        '#type' => 'checkbox',
        '#default_value' => isset($item['invert']) ? $item['invert'] : 0,
        '#attributes' => array('class' => array('fontawesome-invert','faf-watch')),
      );

      $fa_fields['fixed_width'] = array(
        '#title' => t('Fixed Width'),
        '#type' => 'checkbox',
        '#default_value' => isset($item['fixed_width']) ? $item['fixed_width'] : 0,
        '#attributes' => array('class' => array('fontawesome-fixed-width','faf-watch')),
      );

      $fa_fields['border'] = array(
        '#title' => t('Add Border'),
        '#type' => 'checkbox',
        '#default_value' => isset($item['border']) ? $item['border'] : 0,
        '#attributes' => array('class' => array('fontawesome-border','faf-watch')),
      );

      $fa_fields['spinning'] = array(
        '#title' => t('Spin Icon'),
        '#type' => 'checkbox',
        '#default_value' => isset($item['spinning']) ? $item['spinning'] : 0,
        '#attributes' => array('class' => array('fontawesome-spinning','faf-watch')),
      );

      $fa_fields['rotation'] = array(
        '#title' => t('Rotate Icon'),
        '#type' => 'select',
        '#default_value' => isset($item['rotation']) ? $item['rotation'] : null,
        '#options' => fontawesome_field_get_option_list('modifiers','rotate'),
        '#attributes' => array('class' => array('fontawesome-rotation','faf-watch')),
      );

      $fa_fields['flip'] = array(
        '#title' => t('Flip Icon'),
        '#type' => 'fieldset',
        '#process' => $process_hack,
      );

      $fa_fields['flip']['flip_horizontal'] = array(
        '#title' => t('Horizontally'),
        '#type' => 'checkbox',
        '#default_value' => isset($item['flip_horizontal']) ? $item['flip_horizontal'] : 0,
        '#attributes' => array('class' => array('fontawesome-flip-horizontal','faf-watch')),
      );

      $fa_fields['flip']['flip_vertical'] = array(
        '#title' => t('Vertically'),
        '#type' => 'checkbox',
        '#default_value' => isset($item['flip_vertical']) ? $item['flip_vertical'] : 0,
        '#attributes' => array('class' => array('fontawesome-flip-vertical','faf-watch')),
      );

      // add the #states to each field except the icon choosing field
      foreach($fa_fields as $k => &$v) {
        if($k != 'icon') {
          $v['#states'] = array(
            'invisible' => array(
              '#' . $field_id . ' select.fontawesome-icon' => array('value' => '0'),
            ),
          );
        }
      }

      // dump the fiels inside containers, add the process hack
      foreach($containers as $idx => $fields) {
        $key = 'container-' . $idx;
        $element['wrapper'][$key] = array(
          '#prefix' => '<div class="container">',
          '#suffix' => '</div>',
          '#process' => $process_hack,
        );

        foreach($fields as $field_name) {
          $element['wrapper'][$key][$field_name] = $fa_fields[$field_name];
        }
      }

      $element['#attached']['css'][] = drupal_get_path('module','fontawesome_field') . '/fontawesome_field.admin.css';
      $element['#attached']['js'][] = drupal_get_path('module','fontawesome_field') . '/fontawesome_field.admin.js';

      // last but not least, let's see if we can use select2
      $select2 = libraries_load('select2');
      if($select2['loaded']) {
        $element['#attached']['js'][] = drupal_get_path('module','fontawesome_field') . '/fontawesome_field.select2.js';
      }
      break;


    case 'fontawesome_field_widget_color': 
      $process_hack = array('fontawesome_field_ignore_parent');

      $required = $element['#required'];
      $item =& $items[$delta];

      $field_id = 'fontawesome-field-' .rand(10000,99999);

      $element['wrapper'] = array(
        '#prefix' => '<div id="'. $field_id .'" class="font-awesome-field-admin-wrapper"><label>' . $instance['label'] . '</label>',
        '#suffix' => '</div>',
        '#process' => $process_hack,
      );

      $element['wrapper']['preview'] = array(
        '#prefix' => '<div class="container"><div class="fontawesome-icon-preview"><p>Preview</p>',
        '#suffix' => '</div></div>',
      );

      $containers = array(
        array('icon'), array('color'),
      );

      $fa_fields['icon'] = array(
        '#title' => t('Icon'),
        '#type' => 'select',
        '#default_value' => isset($item['icon']) ? $item['icon'] : null,
        '#options' => fontawesome_field_get_option_list('icons'),
        '#required' => $required,
        '#attributes' => array('class' => array('fontawesome-icon','faf-watch', 'fontawesome-preview-field')),
      );


      // Color field code from color_field module (which is required for this functionality)
      if (module_exists('color_field')) {
        $value = $item['color'];
        $widget = array();
        $field_id = str_replace("_", "-", $field['field_name']) . '-' . $langcode . '-' . $delta;
        // Support field collection module.
        isset($element['#field_parents']) ? $bundle_id = implode('-', $element['#field_parents']) : $bundle_id = '';
        $divid = 'div-' . $field_id . '-' . $bundle_id . '-rgb';
        $id = 'edit-' . $field_id . '-' . $bundle_id . '-rgb';

        $settings['value'] = $value;
        $settings['id'] = $id;

        $default_colors = (isset($field['settings']['default_colors'])) ? $field['settings']['default_colors'] : '';
        preg_match_all("/#[0-9a-fA-F]{6}/", $default_colors, $default_colors, PREG_SET_ORDER);
        foreach ($default_colors as $color) {
          $settings['colors'][] = $color[0];
        }

        $widget += array(
          '#suffix' => '<label>' . t('!icon Color', array('!icon' => $instance['label'])) . '</label><div id=' . $divid . '></div><div class="description">' . $element['#description'] . '</div>',
          '#attached' => array(
            'js' => array(
              drupal_get_path('module', 'color_field') . '/color_field_default/color_field.js',
              drupal_get_path('module', 'color_field') . '/color_field_default/color_field.jquery.js',
              array(
                'data' => array('color_field' => array('#' . $divid => $settings)),
                'type' => 'setting',
              ),
            ),
            'css' => array(drupal_get_path('module', 'color_field') . '/color_field_default/color_field.css'),
          ),
        );

        $widget += array(
          '#attributes' => array('class' => array('element-invisible'),'id' => $id),
          '#type' => 'token',
          '#default_value' => $value,
          '#size' => 7,
          '#maxlength' => 7,
        );
        
        $fa_fields['color'] = $widget;

      }

      // add the #states to each field except the icon choosing field
      /*foreach($fa_fields as $k => &$v) {
        if($k != 'icon') {
          $v['#states'] = array(
            'invisible' => array(
              '#' . $field_id . ' select.fontawesome-icon' => array('value' => '0'),
            ),
          );
        }
      }*/

      // dump the fields inside containers, add the process hack
      foreach($containers as $idx => $fields) {
        $key = 'container-' . $idx;
        $element['wrapper'][$key] = array(
          '#prefix' => '<div class="container">',
          '#suffix' => '</div>',
          '#process' => $process_hack,
        );

        foreach($fields as $field_name) {
          $element['wrapper'][$key][$field_name] = $fa_fields[$field_name];
        }
      }

      //$element['#attached']['css'][] = drupal_get_path('module','fontawesome_field') . '/preview-app/fontawesome-icon-list.css';
      //$element['#attached']['js'][] = drupal_get_path('module','fontawesome_field') . '/preview-app/tabcomplete.min.js';
      //$element['#attached']['js'][] = drupal_get_path('module','fontawesome_field') . '/preview-app/preview-app.js';

      $element['#attached']['css'][] = drupal_get_path('module','fontawesome_field') . '/fontawesome_field.admin.css';
      $element['#attached']['js'][] = drupal_get_path('module','fontawesome_field') . '/fontawesome_field.admin.js';

      // last but not least, let's see if we can use select2
      $select2 = libraries_load('select2');
      if($select2['loaded']) {
        $element['#attached']['js'][] = drupal_get_path('module','fontawesome_field') . '/fontawesome_field.select2.js';
      }

      break;

  }

  return $element;
}



/**
 * @param $form
 * @param $form_state
 * @param $complete
 * @return mixed
 */
function fontawesome_field_ignore_parent(&$form, &$form_state, $complete) {
  if(isset($form['#parents'])) {
    array_pop($form['#parents']);
  }

  return $form;
}


/**
 * implemenation of hook_formatter_info()
 * @return array
 */
function fontawesome_field_field_formatter_info() {
  return array (
    'fontawesome_field_formatter' => array (
      'label' => t('Default Font Awesome field formatter'),
      'field types' => array ('fontawesome_field'),
    ),
    'fontawesome_field_formatter_color' => array (
      'label' => t('Colored icon'),
      'field types' => array ('fontawesome_field'),
    ),
    'fontawesome_field_formatter_bg' => array (
      'label' => t('Colored icon circle'),
      'field types' => array ('fontawesome_field'),
    ),
  );
}


/**
 * implementation of hook_field_formatter_view().
 */
function fontawesome_field_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
  $element = array();
  switch ($display['type']) {
    case 'fontawesome_field_formatter':
      foreach ($items as $delta => $item) {
        $element[$delta]['#markup'] = fontawesome_field_render($item);
      }
      break;

    case 'fontawesome_field_formatter_color':
      foreach ($items as $delta => $item) {
        $element[$delta]['#markup'] = str_replace('i class', 'i style="background-color:red" class', fontawesome_field_render($item));
      }
      break;

    case 'fontawesome_field_formatter_bg':
      foreach ($items as $delta => $item) {
        $element[$delta]['#markup'] = fontawesome_field_render_bg($item);
        $element[$delta]['#attached'] = array(
          'css' => array(drupal_get_path('module', 'fontawesome_field') . '/fontawesome_field.css'),
        );
      }
      break;

  }
  return $element;
}


/**
 * renders out a field.  called by the render function and can also be called from other modules to render out a field based on the vlaues
 * @param $item
 * @return string
 */
function fontawesome_field_render($item) {
  $classes = array('fa');
  $classes[] = $item['icon'];
  if($item['size']) { $classes[] = $item['size']; }
  if($item['rotation']) { $classes[] = $item['rotation']; }

  // booleans
  $bools = array(
    'fixed_width' => 'fa-fw',
    'border'      => 'fa-border',
    'invert'      => 'fa-inverse',
    'spinning'    => 'fa-spin',
    'flip_horizontal' => 'fa-flip-horizontal',
    'flip_vertical' => 'fa-flip-vertical'
  );

  foreach($bools as $field => $class) {
    if($item[$field]) {
      $classes[] = $class;
    }
  }

  return '<i class="' . implode(" ", $classes) . '"></i>';
}


function fontawesome_field_render_bg($item) {
  return '<div class="font-awesome-field-icon-circle" style="background-color:red">' . fontawesome_field_render($item) . '</div>';
}

/**
 * @param $type
 * @return array
 */
function fontawesome_field_get_option_list($type, $subset = null) {
  $raw = fontawesome_field_known_sets($type, $subset);

  $options = array(0 => 'Choose...');
  $pattern = array('/^fa-/','/-o$/','/-/','/ o /','/~(.+)$/');
  $replace = array('',' (open)',' ',' (open~',', $1)');
  if(!$subset) {
    foreach($raw as $optgroup_label => $optgroup) {
      foreach($optgroup as $k => $v) {
        $options[$optgroup_label][$v] = preg_replace($pattern, $replace, $v);
      }
    }
  }
  else {
    foreach($raw as $k => $v) {
      $options[$v] = preg_replace($pattern, $replace, $v);
    }
  }

  return $options;
}


/**
 * Implements hook_field_is_empty().
 */
function fontawesome_field_field_is_empty($item, $field) {
  if (empty($item['icon'])) {
    return true;
  }
}


/**
 * @return array
 */
function _fontawesome_field_audit() {
  $path = libraries_get_path('fontawesome') . '/css/font-awesome.css';
  $css = file_get_contents($path);

  $matches = array();
  $pattern = "/\.(fa-[\w-]+)/";
  preg_match_all($pattern, $css, $matches);
  $raw = drupal_map_assoc(array_unique($matches[1]));

  // parse the options list into option selects and all that
  $icons = array();
  $sets = fontawesome_field_known_sets();
  foreach($sets['icons'] as $label => $set) {
    foreach($set as $icon) {
      $icons[$label][$icon] = $icon;
      unset($raw[$icon]);
    }
  }

  foreach($sets as $group) {
    foreach($group as $subset) {
      foreach($subset as $icon) {
        unset($raw[$icon]);
      }
    }
  }

  return $icons;
}


/**
 * @param null $type
 * @return array
 */
function fontawesome_field_known_sets($type = null, $subset = null) {
  $sets = array();

  $sets['icons']['Web Applications'] = array(
    'fa-adjust',
    'fa-anchor',
    'fa-archive',
    'fa-area-chart',
    'fa-arrows',
    'fa-arrows-h',
    'fa-arrows-v',
    'fa-asterisk',
    'fa-at',
    'fa-automobile',
    'fa-ban',
    'fa-bank',
    'fa-bar-chart',
    'fa-bar-chart-o',
    'fa-barcode',
    'fa-bars',
    'fa-beer',
    'fa-bell',
    'fa-bell-o',
    'fa-bell-slash',
    'fa-bell-slash-o',
    'fa-bicycle',
    'fa-binoculars',
    'fa-birthday-cake',
    'fa-bolt',
    'fa-bomb',
    'fa-book',
    'fa-bookmark',
    'fa-bookmark-o',
    'fa-briefcase',
    'fa-bug',
    'fa-building',
    'fa-building-o',
    'fa-bullhorn',
    'fa-bullseye',
    'fa-bus',
    'fa-cab',
    'fa-calculator',
    'fa-calendar',
    'fa-calendar-o',
    'fa-camera',
    'fa-camera-retro',
    'fa-car',
    'fa-caret-square-o-down',
    'fa-caret-square-o-left',
    'fa-caret-square-o-right',
    'fa-caret-square-o-up',
    'fa-cc',
    'fa-certificate',
    'fa-check',
    'fa-check-circle',
    'fa-check-circle-o',
    'fa-check-square',
    'fa-check-square-o',
    'fa-child',
    'fa-circle',
    'fa-circle-o',
    'fa-circle-o-notch',
    'fa-circle-thin',
    'fa-clock-o',
    'fa-close',
    'fa-cloud',
    'fa-cloud-download',
    'fa-cloud-upload',
    'fa-code',
    'fa-code-fork',
    'fa-coffee',
    'fa-cog',
    'fa-cogs',
    'fa-comment',
    'fa-comment-o',
    'fa-comments',
    'fa-comments-o',
    'fa-compass',
    'fa-copyright',
    'fa-credit-card',
    'fa-crop',
    'fa-crosshairs',
    'fa-cube',
    'fa-cubes',
    'fa-cutlery',
    'fa-dashboard',
    'fa-database',
    'fa-desktop',
    'fa-dot-circle-o',
    'fa-download',
    'fa-edit',
    'fa-ellipsis-h',
    'fa-ellipsis-v',
    'fa-envelope',
    'fa-envelope-o',
    'fa-envelope-square',
    'fa-eraser',
    'fa-exchange',
    'fa-exclamation',
    'fa-exclamation-circle',
    'fa-exclamation-triangle',
    'fa-external-link',
    'fa-external-link-square',
    'fa-eye',
    'fa-eye-slash',
    'fa-eyedropper',
    'fa-fax',
    'fa-female',
    'fa-fighter-jet',
    'fa-file-archive-o',
    'fa-file-audio-o',
    'fa-file-code-o',
    'fa-file-excel-o',
    'fa-file-image-o',
    'fa-file-movie-o',
    'fa-file-pdf-o',
    'fa-file-photo-o',
    'fa-file-picture-o',
    'fa-file-powerpoint-o',
    'fa-file-sound-o',
    'fa-file-video-o',
    'fa-file-word-o',
    'fa-file-zip-o',
    'fa-film',
    'fa-filter',
    'fa-fire',
    'fa-fire-extinguisher',
    'fa-flag',
    'fa-flag-checkered',
    'fa-flag-o',
    'fa-flash',
    'fa-flask',
    'fa-folder',
    'fa-folder-o',
    'fa-folder-open',
    'fa-folder-open-o',
    'fa-frown-o',
    'fa-futbol-o',
    'fa-gamepad',
    'fa-gavel',
    'fa-gear',
    'fa-gears',
    'fa-gift',
    'fa-glass',
    'fa-globe',
    'fa-graduation-cap',
    'fa-group',
    'fa-hdd-o',
    'fa-headphones',
    'fa-heart',
    'fa-heart-o',
    'fa-history',
    'fa-home',
    'fa-image',
    'fa-inbox',
    'fa-info',
    'fa-info-circle',
    'fa-institution',
    'fa-key',
    'fa-keyboard-o',
    'fa-language',
    'fa-laptop',
    'fa-leaf',
    'fa-legal',
    'fa-lemon-o',
    'fa-level-down',
    'fa-level-up',
    'fa-life-bouy',
    'fa-life-buoy',
    'fa-life-ring',
    'fa-life-saver',
    'fa-lightbulb-o',
    'fa-line-chart',
    'fa-location-arrow',
    'fa-lock',
    'fa-magic',
    'fa-magnet',
    'fa-mail-forward',
    'fa-mail-reply',
    'fa-mail-reply-all',
    'fa-male',
    'fa-map-marker',
    'fa-meh-o',
    'fa-microphone',
    'fa-microphone-slash',
    'fa-minus',
    'fa-minus-circle',
    'fa-minus-square',
    'fa-minus-square-o',
    'fa-mobile',
    'fa-mobile-phone',
    'fa-money',
    'fa-moon-o',
    'fa-mortar-board',
    'fa-music',
    'fa-navicon',
    'fa-newspaper-o',
    'fa-paint-brush',
    'fa-paper-plane',
    'fa-paper-plane-o',
    'fa-paw',
    'fa-pencil',
    'fa-pencil-square',
    'fa-pencil-square-o',
    'fa-phone',
    'fa-phone-square',
    'fa-photo',
    'fa-picture-o',
    'fa-pie-chart',
    'fa-plane',
    'fa-plug',
    'fa-plus',
    'fa-plus-circle',
    'fa-plus-square',
    'fa-plus-square-o',
    'fa-power-off',
    'fa-print',
    'fa-puzzle-piece',
    'fa-qrcode',
    'fa-question',
    'fa-question-circle',
    'fa-quote-left',
    'fa-quote-right',
    'fa-random',
    'fa-recycle',
    'fa-refresh',
    'fa-remove',
    'fa-reorder',
    'fa-reply',
    'fa-reply-all',
    'fa-retweet',
    'fa-road',
    'fa-rocket',
    'fa-rss',
    'fa-rss-square',
    'fa-search',
    'fa-search-minus',
    'fa-search-plus',
    'fa-send',
    'fa-send-o',
    'fa-share',
    'fa-share-alt',
    'fa-share-alt-square',
    'fa-share-square',
    'fa-share-square-o',
    'fa-shield',
    'fa-shopping-cart',
    'fa-sign-in',
    'fa-sign-out',
    'fa-signal',
    'fa-sitemap',
    'fa-sliders',
    'fa-smile-o',
    'fa-soccer-ball-o',
    'fa-sort',
    'fa-sort-alpha-asc',
    'fa-sort-alpha-desc',
    'fa-sort-amount-asc',
    'fa-sort-amount-desc',
    'fa-sort-asc',
    'fa-sort-desc',
    'fa-sort-down',
    'fa-sort-numeric-asc',
    'fa-sort-numeric-desc',
    'fa-sort-up',
    'fa-space-shuttle',
    'fa-spinner',
    'fa-spoon',
    'fa-square',
    'fa-square-o',
    'fa-star',
    'fa-star-half',
    'fa-star-half-empty',
    'fa-star-half-full',
    'fa-star-half-o',
    'fa-star-o',
    'fa-suitcase',
    'fa-sun-o',
    'fa-support',
    'fa-tablet',
    'fa-tachometer',
    'fa-tag',
    'fa-tags',
    'fa-tasks',
    'fa-taxi',
    'fa-terminal',
    'fa-thumb-tack',
    'fa-thumbs-down',
    'fa-thumbs-o-down',
    'fa-thumbs-o-up',
    'fa-thumbs-up',
    'fa-ticket',
    'fa-times',
    'fa-times-circle',
    'fa-times-circle-o',
    'fa-tint',
    'fa-toggle-down',
    'fa-toggle-left',
    'fa-toggle-off',
    'fa-toggle-on',
    'fa-toggle-right',
    'fa-toggle-up',
    'fa-trash',
    'fa-trash-o',
    'fa-tree',
    'fa-trophy',
    'fa-truck',
    'fa-tty',
    'fa-umbrella',
    'fa-university',
    'fa-unlock',
    'fa-unlock-alt',
    'fa-unsorted',
    'fa-upload',
    'fa-user',
    'fa-users',
    'fa-video-camera',
    'fa-volume-down',
    'fa-volume-off',
    'fa-volume-up',
    'fa-warning',
    'fa-wheelchair',
    'fa-wifi',
    'fa-wrench',
  );

  $sets['icons']['File Types'] = array(
    'fa-file',
    'fa-file-archive-o',
    'fa-file-audio-o',
    'fa-file-code-o',
    'fa-file-excel-o',
    'fa-file-image-o',
    'fa-file-movie-o',
    'fa-file-o',
    'fa-file-pdf-o',
    'fa-file-photo-o',
    'fa-file-picture-o',
    'fa-file-powerpoint-o',
    'fa-file-sound-o',
    'fa-file-text',
    'fa-file-text-o',
    'fa-file-video-o',
    'fa-file-word-o',
    'fa-file-zip-o',
  );

  $sets['icons']['Spinners'] = array(
    'fa-circle-o-notch',
    'fa-cog',
    'fa-gear',
    'fa-refresh',
    'fa-spinner',
  );

  $sets['icons']['Form Controls'] = array(
    'fa-check-square',
    'fa-check-square-o',
    'fa-circle',
    'fa-circle-o',
    'fa-dot-circle-o',
    'fa-minus-square',
    'fa-minus-square-o',
    'fa-plus-square',
    'fa-plus-square-o',
    'fa-square',
    'fa-square-o',
  );

  $sets['icons']['Payment'] = array(
    'fa-cc-amex',
    'fa-cc-discover',
    'fa-cc-mastercard',
    'fa-cc-paypal',
    'fa-cc-stripe',
    'fa-cc-visa',
    'fa-credit-card',
    'fa-google-wallet',
    'fa-paypal',
  );

  $sets['icons']['Charting'] = array(
    'fa-area-chart',
    'fa-bar-chart',
    'fa-bar-chart-o',
    'fa-line-chart',
    'fa-pie-chart',
  );

  $sets['icons']['Currency'] = array(
    'fa-bitcoin',
    'fa-btc',
    'fa-cny',
    'fa-dollar',
    'fa-eur',
    'fa-euro',
    'fa-gbp',
    'fa-ils',
    'fa-inr',
    'fa-jpy',
    'fa-krw',
    'fa-money',
    'fa-rmb',
    'fa-rouble',
    'fa-rub',
    'fa-ruble',
    'fa-rupee',
    'fa-shekel',
    'fa-sheqel',
    'fa-try',
    'fa-turkish-lira',
    'fa-usd',
    'fa-won',
    'fa-yen',
  );

  $sets['icons']['Text Editing'] = array(
    'fa-align-center',
    'fa-align-justify',
    'fa-align-left',
    'fa-align-right',
    'fa-bold',
    'fa-chain',
    'fa-chain-broken',
    'fa-clipboard',
    'fa-columns',
    'fa-copy',
    'fa-cut',
    'fa-dedent',
    'fa-eraser',
    'fa-file',
    'fa-file-o',
    'fa-file-text',
    'fa-file-text-o',
    'fa-files-o',
    'fa-floppy-o',
    'fa-font',
    'fa-header',
    'fa-indent',
    'fa-italic',
    'fa-link',
    'fa-list',
    'fa-list-alt',
    'fa-list-ol',
    'fa-list-ul',
    'fa-outdent',
    'fa-paperclip',
    'fa-paragraph',
    'fa-paste',
    'fa-repeat',
    'fa-rotate-left',
    'fa-rotate-right',
    'fa-save',
    'fa-scissors',
    'fa-strikethrough',
    'fa-subscript',
    'fa-superscript',
    'fa-table',
    'fa-text-height',
    'fa-text-width',
    'fa-th',
    'fa-th-large',
    'fa-th-list',
    'fa-underline',
    'fa-undo',
    'fa-unlink',
  );

  $sets['icons']['Directional'] = array(
    'fa-angle-double-down',
    'fa-angle-double-left',
    'fa-angle-double-right',
    'fa-angle-double-up',
    'fa-angle-down',
    'fa-angle-left',
    'fa-angle-right',
    'fa-angle-up',
    'fa-arrow-circle-down',
    'fa-arrow-circle-left',
    'fa-arrow-circle-o-down',
    'fa-arrow-circle-o-left',
    'fa-arrow-circle-o-right',
    'fa-arrow-circle-o-up',
    'fa-arrow-circle-right',
    'fa-arrow-circle-up',
    'fa-arrow-down',
    'fa-arrow-left',
    'fa-arrow-right',
    'fa-arrow-up',
    'fa-arrows',
    'fa-arrows-alt',
    'fa-arrows-h',
    'fa-arrows-v',
    'fa-caret-down',
    'fa-caret-left',
    'fa-caret-right',
    'fa-caret-square-o-down',
    'fa-caret-square-o-left',
    'fa-caret-square-o-right',
    'fa-caret-square-o-up',
    'fa-caret-up',
    'fa-chevron-circle-down',
    'fa-chevron-circle-left',
    'fa-chevron-circle-right',
    'fa-chevron-circle-up',
    'fa-chevron-down',
    'fa-chevron-left',
    'fa-chevron-right',
    'fa-chevron-up',
    'fa-hand-o-down',
    'fa-hand-o-left',
    'fa-hand-o-right',
    'fa-hand-o-up',
    'fa-long-arrow-down',
    'fa-long-arrow-left',
    'fa-long-arrow-right',
    'fa-long-arrow-up',
    'fa-toggle-down',
    'fa-toggle-left',
    'fa-toggle-right',
    'fa-toggle-up',
  );

  $sets['icons']['Video'] = array(
    'fa-arrows-alt',
    'fa-backward',
    'fa-compress',
    'fa-eject',
    'fa-expand',
    'fa-fast-backward',
    'fa-fast-forward',
    'fa-forward',
    'fa-pause',
    'fa-play',
    'fa-play-circle',
    'fa-play-circle-o',
    'fa-step-backward',
    'fa-step-forward',
    'fa-stop',
    'fa-youtube-play',
  );

  $sets['icons']['Brand'] = array(
    'fa-adn',
    'fa-android',
    'fa-angellist',
    'fa-apple',
    'fa-behance',
    'fa-behance-square',
    'fa-bitbucket',
    'fa-bitbucket-square',
    'fa-bitcoin',
    'fa-btc',
    'fa-cc-amex',
    'fa-cc-discover',
    'fa-cc-mastercard',
    'fa-cc-paypal',
    'fa-cc-stripe',
    'fa-cc-visa',
    'fa-codepen',
    'fa-css3',
    'fa-delicious',
    'fa-deviantart',
    'fa-digg',
    'fa-dribbble',
    'fa-dropbox',
    'fa-drupal',
    'fa-empire',
    'fa-facebook',
    'fa-facebook-square',
    'fa-flickr',
    'fa-foursquare',
    'fa-ge',
    'fa-git',
    'fa-git-square',
    'fa-github',
    'fa-github-alt',
    'fa-github-square',
    'fa-gittip',
    'fa-google',
    'fa-google-plus',
    'fa-google-plus-square',
    'fa-google-wallet',
    'fa-hacker-news',
    'fa-html5',
    'fa-instagram',
    'fa-ioxhost',
    'fa-joomla',
    'fa-jsfiddle',
    'fa-lastfm',
    'fa-lastfm-square',
    'fa-linkedin',
    'fa-linkedin-square',
    'fa-linux',
    'fa-maxcdn',
    'fa-meanpath',
    'fa-openid',
    'fa-pagelines',
    'fa-paypal',
    'fa-pied-piper',
    'fa-pied-piper-alt',
    'fa-pinterest',
    'fa-pinterest-square',
    'fa-qq',
    'fa-ra',
    'fa-rebel',
    'fa-reddit',
    'fa-reddit-square',
    'fa-renren',
    'fa-share-alt',
    'fa-share-alt-square',
    'fa-skype',
    'fa-slack',
    'fa-slideshare',
    'fa-soundcloud',
    'fa-spotify',
    'fa-stack-exchange',
    'fa-stack-overflow',
    'fa-steam',
    'fa-steam-square',
    'fa-stumbleupon',
    'fa-stumbleupon-circle',
    'fa-tencent-weibo',
    'fa-trello',
    'fa-tumblr',
    'fa-tumblr-square',
    'fa-twitch',
    'fa-twitter',
    'fa-twitter-square',
    'fa-vimeo-square',
    'fa-vine',
    'fa-vk',
    'fa-wechat',
    'fa-weibo',
    'fa-weixin',
    'fa-windows',
    'fa-wordpress',
    'fa-xing',
    'fa-xing-square',
    'fa-yahoo',
    'fa-yelp',
    'fa-youtube',
    'fa-youtube-play',
    'fa-youtube-square',
  );

  $sets['icons']['Medical'] = array(
    'fa-ambulance',
    'fa-h-square',
    'fa-hospital-o',
    'fa-medkit',
    'fa-plus-square',
    'fa-stethoscope',
    'fa-user-md',
    'fa-wheelchair',
  );

  $sets['modifiers']['borders'] = array(
    'fa-border',
  );

  $sets['modifiers']['movement'] = array(
    'fa-spin',
  );

  $sets['modifiers']['size'] = array(
    'fa-lg',
    'fa-2x',
    'fa-3x',
    'fa-4x',
    'fa-5x',
  );

  $sets['modifiers']['rotate'] = array(
    'fa-rotate-90',
    'fa-rotate-180',
    'fa-rotate-270',
  );

  $sets['modifiers']['flip'] = array(
    'fa-flip-horizontal',
    'fa-flip-vertical',
  );

  $sets['modifiers']['invert'] = array(
    'fa-inverse',
  );

  $sets['modifiers']['stack'] = array(
    'fa-stack',
    'fa-stack-1x',
    'fa-stack-2x',
  );

  $sets['modifiers']['misc'] = array(
    'fa-fw', // fixed width
    'fa-ul', // lists
    'fa-li', // lists
  );

  if($type && $subset) {
    return $sets[$type][$subset];
  }
  elseif($type && !$subset) {
    return $sets[$type];
  }

  return $sets;
}
