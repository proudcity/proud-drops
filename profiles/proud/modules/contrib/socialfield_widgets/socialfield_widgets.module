<?php


// @todo; look at Overriding Timeline Selection
// https://dev.twitter.com/web/embedded-timelines#creating



/**
 * Implements hook_menu().
 */
function socialfield_widgets_menu() {
  $items['admin/config/media/socialfield/widgets'] = array(
    'title' => 'Social field widget ',
    'description' => 'Social field widget settings',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('socialfield_widgets_settings'),
    'access arguments' => array('view services'),
    'type' => MENU_NORMAL_ITEM,
  );
  return $items;
}

/**
 * Table that displays all available services.
 */
function socialfield_widgets_settings($form, &$form_state) {
  $form = array();
  $form['socialfield_widgets_twitter_widget_id'] = array(
    '#type' => 'textfield',
    '#description' => t('Create a new widget on the !link and enter the Widget ID parameter (the data-widget-id from the generated embed code). This can also be overwritten per-field.', array('!link' => l('Twitter settings page', 'https://twitter.com/settings/widgets'))),
    '#title' => t('Twitter Widget ID'),
    '#default_value' => variable_get('socialfield_widgets_twitter_widget_id', ''),
  );

  return system_settings_form($form);
}



/******************************* FIELD FORMATTERS ***************************** */

/**
* Implements hook_field_formatter_info().
*/
function socialfield_widgets_field_formatter_info() {
  $info = array(
    'socialfield_twitter' => array(
      'label' => t('Twitter feed'),
      'field types' => array('social_links_field'),
      'settings'  => array(
        'widget_id' => variable_get('socialfield_widgets_twitter_widget_id', ''),
        'width' => '',
        'height' => '',
        'theme' => '',
        'chrome' => '',
        'link_color' => '',
        'border_color' => '',
        'tweet_limit' => '',
        'follow_link' => TRUE,
      ),
    ),
    'socialfield_likebox' => array(
      'label' => t('Facebook Likebox'),
      'field types' => array('social_links_field'),
      'settings'  => array(
        'width' => '',
        'height' => '',
        'colorscheme' => 'light',
        'show_faces' => TRUE,
        'stream' => FALSE,
        'header' => TRUE,
        'show_border' => TRUE,
      ),
    ),
  );
  return $info;
}


/**
 * Implements hook_field_formatter_settings_form().
 */
function socialfield_widgets_field_formatter_settings_form($field, $instance, $view_mode, $form, &$form_state) {
  $element = array();
  $display = $instance['display'][$view_mode];
  $settings = $display['settings'];

  // Add fields
  switch ($display['type']) {

    case 'socialfield_twitter':
      $element['widget_id'] = array(
        '#title' => t('Widget ID'),
        '#type' => 'textfield',
        '#default_value' => $settings['widget_id'],
        '#description' => t('Create a new widget on the !link and enter the Widget ID parameter (the data-widget-id from the generated embed code).', array('!link' => l('Twitter settings page', 'https://twitter.com/settings/widgets'))),
      );
      $element['width'] = array(
        '#title' => t('Width'),
        '#type' => 'textfield',
        '#default_value' => $settings['width'],
        '#field_suffix' => ' px',
      );
      $element['height'] = array(
        '#title' => t('Height'),
        '#type' => 'textfield',
        '#default_value' => $settings['height'],
        '#field_suffix' => ' px',
      );
      $element['theme'] = array(
        '#title' => t('Theme'),
        '#type' => 'select',
        '#default_value' => $settings['theme'],
        '#options' => array('' => t('Light'), 'dark' => t('Dark')),
      );
      $element['chrome'] = array(
        '#title' => t('Chrome'),
        '#type' => 'select',
        '#default_value' => $settings['chrome'],
        '#description' => t('Use a space-separated set of the following options: <code>noheader</code> <code>nofooter</code> <code>noborders</code> <code>noscrollbar</code> <code>transparent</code>.'),
      );
      $element['link_color'] = array(
        '#title' => t('Link Color'),
        '#type' => 'textfield',
        '#default_value' => $settings['link_color'],
        '#attributes' => array('placeholder' => '#'),
      );
      $element['border_color'] = array(
        '#title' => t('Border Color'),
        '#type' => 'textfield',
        '#default_value' => $settings['border_color'],
        '#attributes' => array('placeholder' => '#'),
      );
      $element['tweet_limit'] = array(
        '#title' => t('Tweet Limit'),
        '#type' => 'textfield',
        '#default_value' => $settings['tweet_limit'],
        '#description' => t('Total number of tweets to display'),
      );
      $element['follow_link'] = array(
        '#title' => t('Add Follow Us link'),
        '#type' => 'checkbox',
        '#default_value' => $settings['follow_link'],
      );
      break;

    case 'socialfield_likebox':
      $element['width'] = array(
        '#title' => t('Width'),
        '#type' => 'textfield',
        '#default_value' => $settings['width'],
        '#field_suffix' => ' px',
      );
      $element['height'] = array(
        '#title' => t('Height'),
        '#type' => 'textfield',
        '#default_value' => $settings['height'],
        '#field_suffix' => ' px',
      );
      $element['colorscheme'] = array(
        '#title' => t('Color scheme'),
        '#type' => 'select',
        '#default_value' => $settings['theme'],
        '#options' => array('light' => t('Light'), 'dark' => t('Dark')),
      );  
      $element['show_faces'] = array(
        '#title' => t('Show friends\' faces'),
        '#type' => 'checkbox',
        '#default_value' => $settings['show_faces'],
      );
      $element['stream'] = array(
        '#title' => t('Show posts'),
        '#type' => 'checkbox',
        '#default_value' => $settings['stream'],
      );
      $element['header'] = array(
        '#title' => t('Show header'),
        '#type' => 'checkbox',
        '#default_value' => $settings['header'],
      );
      $element['show_border'] = array(
        '#title' => t('Show border'),
        '#type' => 'checkbox',
        '#default_value' => $settings['show_border'],
      );
      break;
  }
 
  return $element;
}


/**
 * Implements hook_field_formatter_settings_summary().
 * @todo
 */
function socialfield_widgets_field_formatter_settings_summary($field, $instance, $view_mode) {
  $display = $instance['display'][$view_mode];
  $settings = $display['settings'];

  $summary = array();

  foreach ($settings as $key => $value) {
    if(!is_array($value)) {
      $summary[] = $key . ': ' . $value;
    }
  }

  return implode('<br />', $summary);
}


/**
 * Implements hook_field_formatter_view().
 */
function socialfield_widgets_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
  $element = array();
  $settings = $display['settings'];
    
  
    
  switch ($display['type']) {
    case 'socialfield_twitter':

      $ids = array();
      foreach ($items as $delta => $item) {
        if ($item['service'] === 'twitter') {
          $ids[] = str_replace(array('http://', 'https://', 'www.'), '', preg_replace('*twitter.com\/*', '$1', $item['url']));
        }
      }
      if (count($ids)) {
        $settings['screen_name'] = implode(',', $ids);
        $element[0] = theme('socialfield_twitter_feed', $settings);
      }
        
      break;

    case 'socialfield_likebox':

      $ids = array();
      foreach ($items as $delta => $item) {
        if ($item['service'] === 'facebook') {
          $ids[] = $item['url'];
        }
      }
      if (count($ids)) {
        $settings['href'] = $ids[0]; // We can only have one FB account, so we choose the first one
        $element[0] = theme('socialfield_facebook_likebox', $settings);
      }
      
      break;

  } // foreach
dpm($element);
dpm($display['type']);
  return $element;
}


/******************************* FORMATTER VIEW FUNCTIONS ***************************** */

        

/******************************* HELPER FUNCTIONS ***************************** */



/******************************* THEME FUNCTIONS ***************************** */

/**
 * Implements hook_theme().
 */
function socialfield_widgets_theme() {
  return array(
    'socialfield_twitter_feed' => array(
      'template' => 'templates/socialfield-twitter-feed',
      'variables' => array(
        'screen_name' => '',
        'widget_id' => '',
        'width' => '',
        'height' => '',
        'theme' => '',
        'chrome' => '',
        'link_color' => '',
        'border_color' => '',
        'tweet_limit' => '',
        'follow_link' => TRUE,
        'placeholder_text' => '',
        'follow_text' => 'Follow us',
      ),
    ),
    'socialfield_facebook_likebox' => array(
      'template' => 'templates/socialfield-facebook-likebox',
      'variables' => array(
        'href' => 'https://www.facebook.com/AlbatrossDigital',
        'width' => '',
        'height' => '',
        'show_faces' => TRUE,
        'stream' => FALSE,
        'colorscheme' => 'light',
        'header' => TRUE,
        'show_border' => TRUE,
      ),
    ),
    /*'socialfield_widgets_facebook_widget_240' => array(
      'template' => 'socialfield-facebook-widget-240',
      'variables' => array('width' => 240, 'height' => 62, 'faces' => TRUE, 'stream' => FALSE, 'header' => FALSE),
    ),*/
  );
}



/**
 * Implements hook_theme_preprocess().
 */
function template_preprocess_socialfield_twitter_feed(&$variables) {
  $keys = socialfield_widgets_theme();
  $keys = $keys['socialfield_twitter_feed']['variables'];
  $variables['widget_id'] = !empty($variables['widget_id']) ? $variables['widget_id'] : variable_get('socialfield_widgets_twitter_widget_id', '');
  $variables['data_attributes'] = socialfield_data_attributes($variables, $keys);
  $variables['placeholder_text'] = empty($variables['data_attributes']) ? $variables['data_attributes'] : t('Tweets by @!name', array('!name' => $variables['screen_name']));
}

/**
 * Implements hook_theme_preprocess().
 */
function template_preprocess_socialfield_facebook_likebox(&$variables) {
  $keys = socialfield_widgets_theme();
  $keys = $keys['socialfield_facebook_likebox']['variables'];
  $variables['data_attributes'] = socialfield_data_attributes($variables, $keys);
}



/**
 * Helper function turns array into data attributes.
 * Similar to drupal_attributes().
 */
function socialfield_data_attributes(array $attributes = array(), $keys) {
  $return = array();
  foreach ($keys as $attribute => $value) {
    $data = implode(' ', (array) $attributes[$attribute]);
    $attribute = 'data-' . str_replace('_', '-', $attribute);
    if (!empty($data)) {
      $data = $data === TRUE || $data === 1 || $data === '1' ? 'true' : $data;
      $data = $data === FALSE || $data === 0 || $data === '0' ? 'false' : $data;
      $return[$attribute] = $attribute . '="' . check_plain($data) . '"';
    }
  }
  return $return ? ' ' . implode(' ', $return) : '';
}