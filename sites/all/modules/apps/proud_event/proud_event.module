<?php
/**
 * @file
 * Code for the Flight Library Events feature.
 */

include_once 'proud_event.features.inc';


/**
 * Implements hook_menu_alter.
 */
function proud_event_menu_alter(&$items) {
  $items['node/%entity_object/register']['access callback'] = 'registration_administer_registrations_access';
  $items['node/%entity_object/register']['access arguments'] = array(0, 1);
  //dpm($items);
}

/**
 * Implements hook_admin_paths_alter().
 */
function proud_event_admin_paths_alter(&$paths) {
  $paths['node/*/registrations/*'] = TRUE;
  $paths['node/*/registrations'] = TRUE;
  $paths['node/*/register'] = TRUE;
  $paths['registration/*'] = TRUE;
  $paths['registration/*/edit'] = TRUE;
}


/******************************* FIELD FORMATTERS ***************************** */

/**
* Implements hook_field_formatter_info().
*/
function proud_event_field_formatter_info() {
  $info = array(
    'registration_button' => array(
      'label' => t('Registration Button'),
      'field types' => array('registration'),
      'settings' => array(),
    ),
    'full_registration_form' => array(
      'label' => t('Full Registration Form'),
      'field types' => array('registration'),
      'settings' => array(),
    ),
  );
  return $info;
}

/**
* Implements hook_field_formatter_view().
*/
function proud_event_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
  $element = array();
  switch ($display['type']) {
    case 'registration_button':
      foreach ($items as $delta => $item) {
        $uri = entity_uri($entity_type, $entity);
        switch ($item['registration_type']) {
          case 'default':
          case 'childrens':
            $errors = proud_event_registration_status_errors($entity_type, $entity, 'button');
            if (!$errors) {
              if ($entity->field_call_to_register[LANGUAGE_NONE][0]['value']) {
                $element[0] = proud_event_button_call_to_register($entity);
              }
              else {
                if (registration_register_page_access($entity_type, $entity)) {
                  if (registration_has_room($entity_type, $entity->nid)) {
                    if ($registered = proud_event_registered($entity_type, $entity)) {
                      $element[0] = $registered;
                    }
                    else {
                      $title = proud_event_registered($entity_type, $entity) ? t('Register another person') : t('Register Today');
                      $element[0] = array(
                        '#markup' => l($title, $uri['path'], array(
                          'fragment' => 'registration-form', 
                          'attributes' => array('class' => array('button event-register')),
                        )),
                      );
                    }
                    
                  } else {
                    $element[0] = proud_event_button_full();
                  }
                }
              }
            }
            else {
              $element[0] = $errors;
            }
            break;
          case 'office_closed':
            $element[0] = proud_event_button_office_closed();
            break;
          case 'notice':
            $element[0] = proud_event_button_notice();
            break;
          case 'event_full':
            $element[0] = proud_event_button_full();
            break;
          default:
            $element[0] = proud_event_button_no_register();
        }
      }
      break;
    case 'full_registration_form':
      foreach ($items as $delta => $item) {
        switch ($item['registration_type']) {
          case 'default':
          case 'childrens':
            $errors = proud_event_registration_status_errors($entity_type, $entity, 'text');
            if (!$errors) {
              if ($entity->field_call_to_register[LANGUAGE_NONE][0]['value']) {
                $element[0] = proud_event_button_call_to_register($entity, 'text');
              }
              else {
                module_load_include('inc', 'registration', 'includes/registration.field');
                $display['type'] = 'registration_form';
                $element = registration_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display);
                $text = proud_event_registered($entity_type, $entity) || !empty($_REQUEST['registered']) 
                  ? '<h3>'. t('Register another person')  .'</h3><p>You\'re already registered for this event! If you need to change or cancel your registration, give us a call at 814.235.7817.</p>'
                  : '<h2>'. t('Register Today') .'</h2>';
                $element[0]['title_markup'] = array(
                  '#markup' => $text,
                  '#weight' => -100,
                );
              }
            } else {
              $element[0] = $errors;
            }
            break;
          case 'event_full':
            $element[0] = proud_event_button_full();
            break;
          default:
            $element[0] = proud_event_button_no_register();
        }
      }
    break;

  }
  return $element;

}

function proud_event_registered($entity_type, $entity) {
  global $user;
  $registration = entity_create('registration', array(
    'entity_id' => $entity->nid,
    'entity_type' => $entity_type,
  ));
  if (registration_is_registered($registration, NULL, $user->uid)) {
    return array(
      '#markup' => l(t('Registered'), 'me/registrations', array(
        'attributes' => array('class' => array('button success event-registered')),
      )),
    );
  }
  /*
  // @todo: make this work
  // This is pulled from registration_is_registered, but we also want to get the registration id
  $states = registration_get_active_states();
  $query = db_select('registration', 'r')
    ->condition('entity_id', $registration->entity_id)
    ->condition('entity_type', $registration->entity_type)
    ->condition('state', $states, 'IN')
    ->condition('user_uid', $user->uid);
  $registration_id = $query->execute()->fetchField();

  if ($registration_id) {
    dpm($registration_id);
    return array(
      '#markup' => l(t('Registered'), 'registration/' . $entity->entity_id . '/edit', array(
        'fragment' => 'registration-form', 
        'attributes' => array('class' => array('button success event-registered')),
        'query' => drupal_get_destination(),
      )),
    );
  }
  */
  return false;
}

function proud_event_button_full() {
  return array(
    '#theme' => 'html_tag',
    '#tag' => 'div',
    '#attributes' => array('class' => array('event-full')),
    '#value' => t('Sorry, this event is full'),
  );
}

function proud_event_button_no_register() {
  return array(
    '#theme' => 'html_tag',
    '#tag' => 'div',
    '#attributes' => array('class' => array('event-no-registration')),
    '#value' => t('No registration necessary'),
  );
}

function proud_event_button_notice() {
  return array(
    '#theme' => 'html_tag',
    '#tag' => 'div',
    '#attributes' => array('class' => array('button alert event-office-notice')),
    '#value' => t('Notice'),
  );
}

function proud_event_button_office_closed() {
  return array(
    '#theme' => 'html_tag',
    '#tag' => 'div',
    '#attributes' => array('class' => array('button secondary event-office-closed')),
    '#value' => t('Office Closed'),
  );
}

function proud_event_button_call_to_register($entity, $format = 'button') {
  if ($format === 'text') {
    return array(
      '#theme' => 'html_tag',
      '#tag' => 'div',
      '#attributes' => array('class' => array('event-call-to-register')),
      '#value' => t('Please call @phone_number to register.', array(
        '@phone_number' => !empty($entity->field_event_phone_number) ? $entity->field_event_phone_number[LANGUAGE_NONE][0]['safe_value'] : ''
      )),
    );
  }
  else {
    return array(
      '#markup' => l(t('Call to Register'), 'node/' . $entity->nid, array(
        'fragment' => 'registration-form',
        'attributes' => array(
          'class' => array('button success event-call'),
          'rel' => !empty($entity->field_event_phone_number) ? $entity->field_event_phone_number[LANGUAGE_NONE][0]['safe_value'] : '',
        ),
      )) . '<div class="phone-number">' . $entity->field_event_phone_number[LANGUAGE_NONE][0]['safe_value'] . '</div>',
    );
  }
}

function proud_event_registration_status_errors($entity_type, $entity, $format = 'text') {
  $errors = array();
  $status = registration_status($entity_type, $entity->nid, $reset = FALSE, $spaces = 1, $registration_id = NULL, $errors);
  if (!$status) {
    switch ($errors[0]) {
      case t('insufficient spaces remaining'): 
        return proud_event_button_full();
        break;
      case t('registration is not yet open'):
        $settings = registration_entity_settings($entity_type, $entity->nid, TRUE);
        $open = isset($settings['open']) ? strtotime($settings['open']) : NULL;
        return proud_event_button_registrations_closed($format, $open);
        break;
      case t('registration is closed'):
        return proud_event_button_registrations_closed($format);
        break;
    }
  }
  return FALSE;
}


function proud_event_button_registrations_closed($format = 'text', $date = NULL) {
  if ($format === 'text' || empty($date)) {
    $date = format_date($date, 'medium');
    $text = !empty($date) ? t('Registrations open on !date.', array('!date' => $date)) : t('Registrations closed');
    return array(
      '#theme' => 'html_tag',
      '#tag' => 'div',
      '#attributes' => array('class' => array('event-no-registration')),
      '#value' => $text,
    );
  }
  else {
    $text = !empty($date) ? t('Registrations open soon') : t('Registrations closed');
    return array(
      '#theme' => 'html_tag',
      '#tag' => 'div',
      '#attributes' => array('class' => array('event-no-registration')),
      '#value' => $text,
    );
  }
}


/******************************* DISPLAY SUITE ***************************** */

/**
 * Implements hook_ds_fields_info().
 */
function proud_event_ds_fields_info($entity_type) {
  $fields = array();

  $fields['node'] = array(
    'field_date_time_only' => array(
      'title' => t('Display date as field time only'),
      'field_type' => DS_FIELD_TYPE_FUNCTION,
      'function' => '_proud_event_field_date_time',
    ),
    'registered_button' => array(
      'title' => t('Registered button for Event view page'),
      'field_type' => DS_FIELD_TYPE_FUNCTION,
      'function' => '_proud_event_ds_registered',
      'ui_limit' => array('event|*'),
    ),
    'repeats_text' => array(
      'title' => t('Date repeats text'),
      'field_type' => DS_FIELD_TYPE_FUNCTION,
      'function' => '_proud_event_ds_date_repeats',
      'ui_limit' => array('event|*'),
    ),

    'repeats_text' => array(
      'title' => t('Date repeats text'),
      'field_type' => DS_FIELD_TYPE_FUNCTION,
      'function' => '_proud_event_ds_date_repeats',
      'ui_limit' => array('event|*'),
    ),
  );
  return $fields;
}



/**
 * Field returns date in "custom time" format.
 */
function _proud_event_field_date_time(array $field) {
  return _proud_event_get_date($field['entity'], 'flight_date_formats_time_ampm');
}

/**
 * Helper function returns date and potential end date
 */
function _proud_event_get_date($entity, $format) {
  // grab start date
  $date = field_get_items('node', $entity, 'field_date');
  $date_field = field_view_value('node', $entity, 'field_date', $date[0], array(
    'type' => 'date_default',
    'settings' => array(
      'format_type' => $format,
    ),
  ));
  $output = $date_field['#markup'];
  return $output;
}

/**
 * Field returns Registered button for Event view page.
 */
function _proud_event_ds_registered(array $field) {
  $entity = $field['entity'];
  $display = array('type' => 'registration_button');
  $items = $entity->field_register[LANGUAGE_NONE];
  $output = proud_event_field_formatter_view('node', $entity, $field, $instance, LANGUAGE_NONE, $items, $display);
  return drupal_render($output);
}


/**
 * Output next upcoming event if this is a repeating date.
 */
function _proud_event_ds_date_repeats(array $field) {
  $entity = $field['entity'];
  if (count($field['entity']->field_date[LANGUAGE_NONE]) > 1) {
    return t('Join us next time on:');
  }
}




/******************************* FORM ALTER ***************************** */


/**
 * Implements hook_form_views_exposed_form_alter().
 */
function proud_event_form_views_exposed_form_alter(&$form, $form_state, $form_id) {
  // events filters
  if($form_state['view']->name == 'calendar') {

    // add semi-colon
    $form['#info']['filter-field_event_category_target_id']['label'] .= ':';
    // add placeholder
    $form['title']['#attributes'] = array(
      'placeholder' => array($form['#info']['filter-title']['label'])
    );
  }
}

/**
* Implements hook_form_alter().
* Add submitter to event create form.
*/
function proud_event_form_event_node_form_alter(&$form, &$form_state) {
  //$form['field_date']['und'][0]['show_repeat_settings']['#title'] = t('This is a multi-session event with only one registration');
  //$form['field_date']['und'][0]['show_repeat_settings']['#description'] = t('Mostly used for Childrens events.');
  $form['field_register'][LANGUAGE_NONE][0]['registration_type']['#options'][''] = t('No Registrations');
}


/**
 * Implements hook_form_alter().
 */
/*function proud_event_form_alter(&$form, $form_state, $form_id) {
  /*$matches = array();
  if (isset($form['#node']->type) && $form_id == $form['#node']->type . '_node_form' && $form['#node']->type === 'event') {
    if (empty($form['#node']->nid)) {
      $form['actions']['submit']['#submit'][] = 'proud_event_form_event_node_form_submit';
    }
  }
  dpm($form_id);
}*/

/**
 * Implements hook_form_alter().
 */
function proud_event_form_registration_entity_settings_form_alter(&$form, $form_state) {
  //$form['registration_settings'] = array(
  //  '#type' => 'vertical_tabs',
  //);
  $form['scheduling']['#collapsed'] = TRUE;
  $form['reminder']['#collapsed'] = TRUE;
  $form['settings']['#collapsed'] = TRUE;

  $form['settings']['maximum_spaces']['#type'] = 'hidden';
  $form['settings']['multiple_registrations']['#type'] = 'value';
  $form['settings']['multiple_registrations']['#value'] = 1;
}

/**
 * Implements hook_form_alter().
 */
function proud_event_form_registration_form_alter(&$form, $form_state) {
  if (empty($form['who_is_registering']['#options']['registration_registrant_type_anon'])  && !user_access('create default registration other users')) {
    $form['who_is_registering']['#default_value'] = 'registration_registrant_type_me';
  }
  unset($form['state']['#description']);
  if (!empty($form['anon_mail'])) {
    unset($form['anon_mail']['#description']);
  }
}





/**
* Create event form submitter.
*/
/*function proud_event_form_event_node_form_submit(&$form, &$form_state) {
  if ($form_state['values']['field_register'][LANGUAGE_NONE][0]['registration_type'] === 'default') {
    $form_state['redirect'] = 'node/'. $form_state['node']->nid . '/registrations/settings';
    dpm($form_state['redirect']);
    //unset($_GET['destination']);
    //drupal_static_reset('drupal_get_destination');
  }
}*/



/**
* Implements hook_form_alter().
*/
/*function proud_event_form_registration_entity_settings_form_alter(&$form, &$form_state) {
  $node = node_load(arg(1));
  if ($node->field_register[LANGUAGE_NONE][0]['registration_type'] === 'default') {
    $form['status']['#default_value'] = 1;
  }
}*/


/**
* Implements hook_node_presave().
*/
/*function proud_event_node_presave(&$node) {
  dpm($node);
}*/




/********************************** VBO Actions ********************************

/**
 * Implementation of hook_action_info().
 */
/*function proud_event_action_info() {
  $actions = array();

  // Add VBO's own programmatic action.
  $actions['proud_event_showed'] = array(
    'label' => t('Mark as showed'),
    'type' => 'registrt',
    'configurable' => FALSE,
    'aggregate' => TRUE,
  );
  $actions['proud_event_noshowed'] = array(
    'label' => t('Mark as no-show'),
    'type' => 'user',
    'configurable' => FALSE,
    'aggregate' => TRUE,
  );
  $actions['proud_event_removed'] = array(
    'label' => t('Mark as cancelled'),
    'type' => 'user',
    'configurable' => FALSE,
    'aggregate' => TRUE,
  );

  $actions['proud_event_export_custom_label_action'] = array(
    'label' => t('send email'),
    'type' => 'user',
    'configurable' => TRUE,
  );

  return $actions;
}*/

/**
 * Custom label form
 */
/*function proud_event_export_custom_label_action_form($context, $form_state) {
  // Get the canned messages terms
  $form['label'] = array(
    '#title' => t('Interests Label'),
    '#type' => 'textfield',
    '#description' => t('All users in this export will be tagged with this interest so your can filter them within Mailchimp.'),
  );
  return $form;
}*/

/**
 * Custom label form submit.
 */
/*function proud_event_export_custom_label_action_submit($form, $form_state) {
  //start by getting the api key and set the apiUrl
  $mailchimp = mailchimp_get_api_object();


  $listId = variable_get('proud_event_list', 0);
  $newgroup = $form_state['values']['label'];

  // List the current interest groups
  $result = $mailchimp->listInterestGroupings($listId);
  $groupexists = FALSE;
  foreach ($result[0]['groups'] as $group) {
    if (trim($group['name']) == trim($newgroup)) {
      $groupexists = TRUE;
    }
  }

  // If already exists delete any group that's been previously created.
  if ($groupexists) {
    $result = $mailchimp->listInterestGroupDel($listId, $newgroup);
  }


  $result = $mailchimp->listInterestGroupAdd($listId, $newgroup);
  if (!$result) {
    drupal_set_message(t('An error occured while updating the group on Mailchimp.  Please try again later.'));
    return FALSE; //no point continuting if we have not created the group successfully.
  }

  $interest_group = str_replace(',', '\,', $newgroup);

  $params = array(
    'mailchimp' => $mailchimp,
    'listId' => $listId,
    'interest_group' => $interest_group,
    'chimps' => $mailchimp->listMembers($listId, 'subscribed'),
  );
  return $params;
}*/
